{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#string-pod","title":"String Pod","text":"<p>Matching texts across languages</p> <ul> <li>Documentation: https://jyyyeung.github.io/stringpod</li> <li>GitHub: https://github.com/jyyyeung/stringpod</li> <li>PyPI: https://pypi.org/project/stringpod/</li> <li>Free software: MIT</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Normalize text with options</li> <li>Check if a text contains a substring</li> <li>Parse numbers from text</li> <li>Compare pinyin of two texts</li> </ul>"},{"location":"#usage","title":"Usage","text":""},{"location":"#contains","title":"Contains","text":"<p>Check if a text contains a substring, with options.</p> <pre><code>stringpod contains \"Hello, world!\" \"world\"\nstringpod contains \"  Hello, world!  \" \"lo, wor\" --options \"strip_whitespace,ignore_case\"\nstringpod contains \"\u200b\u6b4c\u66f2\u200b\uff08\u200b\u7d14\u97f3\u6a02\u200b\uff09\" \"(\u200b\u7eaf\u97f3\u4e50\u200b)\" --options \"ignore_chinese_variant\"\n</code></pre>"},{"location":"#normalize","title":"Normalize","text":"<p>Normalize text to a standard form.</p> <pre><code>stringpod normalize \"Hello, World!!!\"\nstringpod normalize \"    Hello,   World!!!\" --options \"all\"\nstringpod normalize \"\u200b\u6b4c\u66f2\u200b\uff08\u200b\u7d14\u97f3\u6a02\u200b\uff09\" --options \"ignore_chinese_variant\"\n</code></pre>"},{"location":"#normalizer-options","title":"Normalizer Options","text":"<ul> <li><code>strip_whitespace</code>: Strip whitespace (leading and trailing) from the text (default: <code>False</code>)</li> <li><code>remove_whitespace</code>: Remove whitespace (all whitespace characters) from the text (default: <code>False</code>)</li> <li><code>strip_whitespace</code> will not be needed if <code>remove_whitespace</code> is <code>True</code></li> <li><code>ignore_chinese_variant</code>: Ignore Chinese variant (default: <code>False</code>)</li> <li><code>ignore_case</code>: Ignore case (default: <code>False</code>)</li> <li>English will be converted to lowercase</li> <li>Chinese will be converted to simplified Chinese</li> <li><code>nfkc</code>: Normalize to NFKC (default: <code>True</code>)</li> </ul>"},{"location":"#number-parser","title":"Number Parser","text":"<p>Parse numbers from text.</p> <pre><code>stringpod number \"One hundred and twenty-three\"\nstringpod number \"One hundred and twenty-three\" --language \"en\"\n</code></pre>"},{"location":"#number-parser-options","title":"Number Parser Options","text":"<ul> <li><code>language</code>: Language of the number (default: <code>en</code>)</li> </ul>"},{"location":"#compare-pinyin","title":"Compare Pinyin","text":"<p>Compare pinyin of two texts.</p> <pre><code>stringpod cmp-pinyin \"\u200b\u4f60\u597d\u200b\" \"\u200b\u4f60\u200b\u53f7\u200b\"\nstringpod cmp-pinyin \"\u200b\u4f60\u597d\u200b\" \"\u200b\u4f60\u200b\u53f7\u200b\" --options \"with_tone\"\nstringpod cmp-pinyin \"\u200b\u4f60\u597d\u200b\" \"\u200b\u4f60\u200b\u53f7\u200b\" --options \"spoken_tone\"\n</code></pre>"},{"location":"#pinyin-options","title":"Pinyin Options","text":"<ul> <li><code>with_tone</code>: Whether to include the tone (default: <code>False</code>)</li> <li><code>spoken_tone</code>: Whether to use the spoken tone (default: <code>False</code>)</li> </ul>"},{"location":"#development","title":"Development","text":"<pre><code>poetry install -E dev -E docs -E test\npoetry run pre-commit install\n</code></pre>"},{"location":"#cli-application","title":"CLI Application","text":"<pre><code>poetry run python -m stringpod.cli --help\n</code></pre>"},{"location":"#python-api","title":"Python API","text":"<pre><code>poetry run python -m stringpod.stringpod --help\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<pre><code>poetry run pytest # Run Pytest\npoetry run python -m stringpod.stringpod -v # Run Doctests\n</code></pre>"},{"location":"#credits","title":"Credits","text":"<p>Core packages:</p> <ul> <li>number-parser</li> <li>pypinyin</li> <li>opencc</li> <li>jieba</li> </ul> <p>This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"api/","title":"Modules","text":""},{"location":"api/#stringpod","title":"<code>stringpod</code>","text":"<p>Main module.</p>"},{"location":"api/#stringpod.contains_chinese","title":"<code>contains_chinese(text)</code>","text":"<p>Check if the text contains Chinese characters.</p> <p>Example:</p> <p>contains_chinese('\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01') True contains_chinese('Hello, world!') False</p> Source code in <code>stringpod/stringpod.py</code> <pre><code>def contains_chinese(text: str) -&gt; bool:\n    \"\"\"Check if the text contains Chinese characters.\n\n    Example:\n    &gt;&gt;&gt; contains_chinese('\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01')\n    True\n    &gt;&gt;&gt; contains_chinese('Hello, world!')\n    False\n    \"\"\"\n    return bool(hanzidentifier.has_chinese(text))\n</code></pre>"},{"location":"api/#stringpod.contains_email","title":"<code>contains_email(text)</code>","text":"<p>Check if the text contains an email.</p> <p>Example:</p> <p>contains_email('test@example.com') True contains_email('test@example.com.tw') True contains_email('test@example') False</p> Source code in <code>stringpod/stringpod.py</code> <pre><code>def contains_email(text: str) -&gt; bool:\n    \"\"\"Check if the text contains an email.\n\n    Example:\n    &gt;&gt;&gt; contains_email('test@example.com')\n    True\n    &gt;&gt;&gt; contains_email('test@example.com.tw')\n    True\n    &gt;&gt;&gt; contains_email('test@example')\n    False\n    \"\"\"\n    return bool(re.search(r\"^\\S+@\\S+\\.\\S+$\", text))\n</code></pre>"},{"location":"api/#stringpod.contains_english","title":"<code>contains_english(text)</code>","text":"<p>Check if the text contains English characters.</p> <p>Example:</p> <p>contains_english('Hello, world!') True contains_english('\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01') False contains_english('HelloWorld') True</p> Source code in <code>stringpod/stringpod.py</code> <pre><code>def contains_english(text: str) -&gt; bool:\n    \"\"\"Check if the text contains English characters.\n\n    Example:\n    &gt;&gt;&gt; contains_english('Hello, world!')\n    True\n    &gt;&gt;&gt; contains_english('\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01')\n    False\n    &gt;&gt;&gt; contains_english('HelloWorld')\n    True\n    \"\"\"\n    return bool(re.search(r\"[a-zA-Z]\", text))\n</code></pre>"},{"location":"api/#stringpod.contains_number","title":"<code>contains_number(text)</code>","text":"<p>Check if the text contains numbers.</p> <p>Example:</p> <p>contains_number('Hello, world!') False contains_number('\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01') False contains_number('\u200b\u4f60\u597d\u200b123') True</p> Source code in <code>stringpod/stringpod.py</code> <pre><code>def contains_number(text: str) -&gt; bool:\n    \"\"\"Check if the text contains numbers.\n\n    Example:\n    &gt;&gt;&gt; contains_number('Hello, world!')\n    False\n    &gt;&gt;&gt; contains_number('\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01')\n    False\n    &gt;&gt;&gt; contains_number('\u200b\u4f60\u597d\u200b123')\n    True\n    \"\"\"\n    return bool(re.search(r\"\\d\", text))\n</code></pre>"},{"location":"api/#stringpod.contains_punctuation","title":"<code>contains_punctuation(text)</code>","text":"<p>Check if the text contains punctuation.</p> <p>Example:</p> <p>contains_punctuation('Hello, world!') True contains_punctuation('\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01') True contains_punctuation('\u200b\u4f60\u597d\u200b\u4e16\u754c\u200b') False</p> Source code in <code>stringpod/stringpod.py</code> <pre><code>def contains_punctuation(text: str) -&gt; bool:\n    \"\"\"Check if the text contains punctuation.\n\n    Example:\n    &gt;&gt;&gt; contains_punctuation('Hello, world!')\n    True\n    &gt;&gt;&gt; contains_punctuation('\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01')\n    True\n    &gt;&gt;&gt; contains_punctuation('\u200b\u4f60\u597d\u200b\u4e16\u754c\u200b')\n    False\n    \"\"\"\n    return bool(re.search(r\"[^\\w\\s]\", text))\n</code></pre>"},{"location":"api/#stringpod.contains_special_character","title":"<code>contains_special_character(text)</code>","text":"<p>Check if the text contains special characters.</p> <p>Example:</p> <p>contains_special_character('Hello,world!') True contains_special_character('Helloworld!') True contains_special_character('Hello World') False contains_special_character('HelloWorld') False</p> Source code in <code>stringpod/stringpod.py</code> <pre><code>def contains_special_character(text: str) -&gt; bool:\n    \"\"\"Check if the text contains special characters.\n\n    Example:\n    &gt;&gt;&gt; contains_special_character('Hello,world!')\n    True\n    &gt;&gt;&gt; contains_special_character('Helloworld!')\n    True\n    &gt;&gt;&gt; contains_special_character('Hello World')\n    False\n    &gt;&gt;&gt; contains_special_character('HelloWorld')\n    False\n    \"\"\"\n    return bool(re.search(r\"[^a-zA-Z0-9\\s]\", text))\n</code></pre>"},{"location":"api/#stringpod.contains_substring","title":"<code>contains_substring(text, substring, options=None)</code>","text":"<p>Check if the text contains a substring.</p> <p>Text will undergo the following transformations before checking: - Normalize to lowercase - Remove whitespace - Remove punctuation - Remove special characters - Romanize Chinese characters</p> <p>The following will be checked: - Traditional and Simplified Chinese     (If the substring is in Traditional Chinese, it will also be checked in Simplified Chinese)</p> <p>Example:</p> <p>contains_substring('\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01', '\u200b\u4f60\u597d\u200b') True options = NormalizerOptions(ignore_chinese_variant=True) contains_substring('\u200b\u8a08\u7b97\u6a5f\u200b', '\u200b\u8ba1\u7b97\u200b', options) True options_all = NormalizerOptions.enable_all() contains_substring('\u200b\u8a08\u7b97\u6a5f\u200b', 'Ji', options_all) False</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The text to check</p> required <code>substring</code> <code>str</code> <p>The substring to check for</p> required <code>options</code> <code>NormalizerOptions | None</code> <p>Normalization options to apply</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the text contains the substring, False otherwise</p> Source code in <code>stringpod/stringpod.py</code> <pre><code>def contains_substring(text: str, substring: str, options: NormalizerOptions | None = None) -&gt; bool:\n    \"\"\"Check if the text contains a substring.\n\n    Text will undergo the following transformations before checking:\n    - Normalize to lowercase\n    - Remove whitespace\n    - Remove punctuation\n    - Remove special characters\n    - Romanize Chinese characters\n\n    The following will be checked:\n    - Traditional and Simplified Chinese\n        (If the substring is in Traditional Chinese, it will also be checked in Simplified Chinese)\n\n    Example:\n\n    &gt;&gt;&gt; contains_substring('\u200b\u4f60\u597d\u200b\uff0c\u200b\u4e16\u754c\u200b\uff01', '\u200b\u4f60\u597d\u200b')\n    True\n    &gt;&gt;&gt; options = NormalizerOptions(ignore_chinese_variant=True)\n    &gt;&gt;&gt; contains_substring('\u200b\u8a08\u7b97\u6a5f\u200b', '\u200b\u8ba1\u7b97\u200b', options)\n    True\n    &gt;&gt;&gt; options_all = NormalizerOptions.enable_all()\n    &gt;&gt;&gt; contains_substring('\u200b\u8a08\u7b97\u6a5f\u200b', 'Ji', options_all)\n    False\n\n    Args:\n        text: The text to check\n        substring: The substring to check for\n        options: Normalization options to apply\n\n    Returns:\n        True if the text contains the substring, False otherwise\n    \"\"\"\n    normalizer = Normalizer(options=options)\n    text_normalized = normalizer.normalize(text)\n    substring_normalized = normalizer.normalize(substring)\n\n    # Check if the substring is in Simplified Chinese\n    return bool(re.search(substring_normalized, text_normalized))\n</code></pre>"},{"location":"api/#stringpod.contains_url","title":"<code>contains_url(text)</code>","text":"<p>Check if the text contains a URL.</p> <p>Example:</p> <p>contains_url('https://www.google.com') True contains_url('http://www.google.com') True contains_url('www.google.com') False contains_url('google.com') False</p> Source code in <code>stringpod/stringpod.py</code> <pre><code>def contains_url(text: str) -&gt; bool:\n    \"\"\"Check if the text contains a URL.\n\n    Example:\n    &gt;&gt;&gt; contains_url('https://www.google.com')\n    True\n    &gt;&gt;&gt; contains_url('http://www.google.com')\n    True\n    &gt;&gt;&gt; contains_url('www.google.com')\n    False\n    &gt;&gt;&gt; contains_url('google.com')\n    False\n    \"\"\"\n    return bool(re.search(r\"https?://\", text))\n</code></pre>"},{"location":"api/#stringpod.contains_whitespace","title":"<code>contains_whitespace(text)</code>","text":"<p>Check if the text contains whitespace.</p> <p>Example:</p> <p>contains_whitespace('Hello, world!') True contains_whitespace('Hello world!') True contains_whitespace('HelloWorld!') False</p> Source code in <code>stringpod/stringpod.py</code> <pre><code>def contains_whitespace(text: str) -&gt; bool:\n    \"\"\"Check if the text contains whitespace.\n\n    Example:\n    &gt;&gt;&gt; contains_whitespace('Hello, world!')\n    True\n    &gt;&gt;&gt; contains_whitespace('Hello world!')\n    True\n    &gt;&gt;&gt; contains_whitespace('HelloWorld!')\n    False\n    \"\"\"\n    return bool(re.search(r\"\\s\", text))\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"CHANGELOG","text":""},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/jyyyeung/stringpod/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>String Pod could always use more documentation, whether as part of the official String Pod docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/jyyyeung/stringpod/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions   are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started","text":"<p>Ready to contribute? Here's how to set up <code>stringpod</code> for local development.</p> <ol> <li>Fork the <code>stringpod</code> repo on GitHub.</li> <li> <p>Clone your fork locally</p> <pre><code>git clone git@github.com:your_name_here/stringpod.git\n</code></pre> </li> <li> <p>Ensure poetry is installed.</p> </li> <li> <p>Install dependencies and start your virtualenv:</p> <pre><code>poetry install -E test -E doc -E dev\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass the    tests, including testing other Python versions, with tox:</p> <pre><code>poetry run tox\n</code></pre> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>git add .\ngit commit -m \"Your detailed description of your changes.\"\ngit push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated. Put    your new functionality into a function with a docstring, and add the    feature to the list in README.md.</li> <li>The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check    https://github.com/jyyyeung/stringpod/actions    and make sure that the tests pass for all supported Python versions.</li> </ol>"},{"location":"contributing/#tips","title":"Tips","text":"<pre><code>poetry run pytest tests/test_stringpod.py\n</code></pre> <p>To run a subset of tests.</p>"},{"location":"contributing/#deploying","title":"Deploying","text":"<p>A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run:</p> <pre><code>poetry run bump2version patch # possible: major / minor / patch\ngit push\ngit push --tags\n</code></pre> <p>GitHub Actions will then deploy to PyPI if tests pass.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install String Pod, run this command in your terminal:</p> <pre><code>pip install stringpod\n</code></pre> <p>This is the preferred method to install String Pod, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for String Pod can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>git clone git://github.com/jyyyeung/stringpod\n</code></pre> <p>Or download the tarball:</p> <pre><code>curl -OJL https://github.com/jyyyeung/stringpod/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>pip install .\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>To use String Pod in a project</p> <pre><code>import stringpod\n</code></pre>"},{"location":"usage/#normalizer","title":"Normalizer","text":"<pre><code>&gt;&gt;&gt; from stringpod import Normalizer, NormalizerOptions\n&gt;&gt;&gt; normalizer = Normalizer()\n&gt;&gt;&gt; normalizer.normalize(\"Hello, world!\")\n</code></pre>"},{"location":"usage/#with-options","title":"With Options","text":"<pre><code># Pass options (as a NormalizerOptions object) during initialization\n&gt;&gt;&gt; options = NormalizerOptions(ignore_case=True)\n&gt;&gt;&gt; normalizer = Normalizer(options=options)\n&gt;&gt;&gt; normalizer.normalize(\"Hello, world!\")\n\"hello, world!\"\n\n# Pass options (as a string) during initialization\n&gt;&gt;&gt; normalizer_from_string = Normalizer(options=\"ignore_case,strip_whitespace\")\n&gt;&gt;&gt; normalizer_from_string.normalize(\"Hello, world!\")\n\"hello, world!\"\n\n# Pass options after initialization\n&gt;&gt;&gt; normalizer = Normalizer()\n&gt;&gt;&gt; normalizer.options = NormalizerOptions(ignore_case=True) # Must be a NormalizerOptions object\n&gt;&gt;&gt; normalizer.normalize(\"Hello, world!\")\n\"hello, world!\"\n\n# Pass options during normalization (will only be applied to this normalization)\n&gt;&gt;&gt; normalizer = Normalizer()\n&gt;&gt;&gt; normalizer.normalize(\"Hello, world!\", options=NormalizerOptions(ignore_case=True))\n\"hello, world!\"\n</code></pre>"},{"location":"usage/#string-contains-substring","title":"String Contains Substring","text":"<pre><code>&gt;&gt;&gt; from stringpod import contains_substring\n&gt;&gt;&gt; contains_substring(\"Hello, world!\", \"world\")\nTrue\n&gt;&gt;&gt; contains_substring(\"Hello, world!\", \"WORLD\", options=\"ignore_case\")\nTrue\n</code></pre>"},{"location":"usage/#number-parser","title":"Number Parser","text":"<pre><code>&gt;&gt;&gt; from stringpod import number_parser\n&gt;&gt;&gt; number_parser(\"One hundred and twenty-three\")\n123\n&gt;&gt;&gt; number_parser(\"One hundred and twenty-three\", language=\"en\")\n123\n&gt;&gt;&gt; number_parser(\"\u200b\u4e00\u842c\u4e09\u200b\", language=\"zh\")\n130000\n</code></pre>"},{"location":"usage/#compare-using-pinyin","title":"Compare using Pinyin","text":"<pre><code>&gt;&gt;&gt; stringpod cmp-pinyin \"\u200b\u4f60\u597d\u200b\" \"\u200b\u4f60\u200b\u53f7\u200b\"\nTrue # Default: \u200b\u5ffd\u7565\u200b\u8072\u8abf\u200b\n&gt;&gt;&gt; stringpod cmp-pinyin \"\u200b\u4f60\u597d\u200b\" \"\u200b\u4f60\u200b\u53f7\u200b\" -t\nFalse # \u200b\u8003\u616e\u200b\u8072\u8abf\u200b\n&gt;&gt;&gt; stringpod cmp-pinyin \"\u200b\u4f60\u597d\u200b\" \"\u200b\u4f60\u200b\u53f7\u200b\" -s\nFalse # \u200b\u8003\u616e\u200b\u8072\u8abf\u200b\uff0c\u200b\u4f7f\u7528\u200b\u53e3\u8a9e\u200b\u8b8a\u8abf\u200b\n</code></pre>"}]}